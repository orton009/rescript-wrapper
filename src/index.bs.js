// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as OperatorsJs from "./operators.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function compose_left(prim0, prim1) {
  return OperatorsJs.compose_left(prim0, prim1);
}

function compose_left2(prim0, prim1) {
  return OperatorsJs.compose_left(prim0, prim1);
}

var Operators = {
  compose_left: compose_left,
  compose_left2: compose_left2
};

function index_to_optional(i) {
  if (i === -1) {
    return ;
  } else {
    return i;
  }
}

function copyWithin(a, to) {
  return a.contents.copyWithin(to);
}

function copyWithinFrom(a, to, from) {
  return a.contents.copyWithin(to, from);
}

function copyWithinFromRange(a, to, start, end) {
  return a.contents.copyWithin(to, start, end);
}

function fillInPlace(a, b) {
  return a.fill(b);
}

function fillFromInPlace(a, b, from) {
  return a.fill(b, from);
}

function fillRangeInPlace(a, start, end) {
  return function (param) {
    return a.fill(param, start, end);
  };
}

function findIndex(a, b) {
  return index_to_optional(b.findIndex(Curry.__1(a)));
}

function findIndexi(a, b) {
  return index_to_optional(b.findIndex(Curry.__2(a)));
}

function indexOf(a, b) {
  return index_to_optional(b.indexOf(a));
}

function pop(x) {
  return Caml_option.undefined_to_opt(x.contents.pop());
}

function push(a, b) {
  return a.contents.push(b);
}

function pushMany(a, b) {
  return Caml_splice_call.spliceObjApply(a.contents, "push", [b]);
}

function lastIndexOf(a, b) {
  return index_to_optional(a.lastIndexOf(b));
}

function lastIndexOfFrom(a, b, from) {
  return index_to_optional(a.lastIndexOf(b, from));
}

function removeCountInPlace(a, pos, count) {
  return a.contents.splice(pos, count);
}

function removeFromInPlace(a, pos) {
  return a.contents.splice(pos);
}

function reverseInPlace(a) {
  return a.contents.reverse();
}

function shift(a) {
  return Caml_option.undefined_to_opt(a.contents.shift());
}

function sortInPlace(a) {
  return a.contents.sort();
}

function sortInPlaceWith(a, fn) {
  return a.contents.sort(Curry.__2(fn));
}

function spliceInPlace(a, pos, remove, add) {
  return Caml_splice_call.spliceObjApply(a.contents, "splice", [
              pos,
              remove,
              add
            ]);
}

function unshift(a, b) {
  return a.contents.unshift(b);
}

function unshiftMany(a, b) {
  return Caml_splice_call.spliceObjApply(a.contents, "unshift", [b]);
}

var $$Array = {
  copyWithin: copyWithin,
  copyWithinFrom: copyWithinFrom,
  copyWithinFromRange: copyWithinFromRange,
  fillInPlace: fillInPlace,
  fillFromInPlace: fillFromInPlace,
  fillRangeInPlace: fillRangeInPlace,
  findIndex: findIndex,
  findIndexi: findIndexi,
  indexOf: indexOf,
  pop: pop,
  push: push,
  pushMany: pushMany,
  lastIndexOf: lastIndexOf,
  lastIndexOfFrom: lastIndexOfFrom,
  removeCountInPlace: removeCountInPlace,
  removeFromInPlace: removeFromInPlace,
  reverseInPlace: reverseInPlace,
  shift: shift,
  sortInPlace: sortInPlace,
  sortInPlaceWith: sortInPlaceWith,
  spliceInPlace: spliceInPlace,
  unsafe_get: undefined,
  unsafe_set: undefined,
  unshift: unshift,
  unshiftMany: unshiftMany,
  keep: Belt_Array.keep,
  keepU: Belt_Array.keepU,
  keepWithIndex: Belt_Array.keepWithIndex,
  keepWithIndexU: Belt_Array.keepWithIndexU,
  keepMap: Belt_Array.keepMap,
  keepMapU: Belt_Array.keepMapU,
  zip: Belt_Array.zip,
  zipBy: Belt_Array.zipBy,
  zipByU: Belt_Array.zipByU,
  unzip: Belt_Array.unzip
};

export {
  Operators ,
  $$Array ,
  
}
/* ./operators.js Not a pure module */
